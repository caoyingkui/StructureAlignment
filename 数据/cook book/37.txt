Analyzer analyzer = new StandardAnalyzer();
Directory directory = new RAMDirectory();
IndexWriterConfig config = new IndexWriterConfig(Version.LATEST, analyzer);
IndexWriter indexWriter = new IndexWriter(directory, config);
Document doc = new Document();
String text = "Lucene is an Information Retrieval library written in Java";
doc.add(new TextField("Content", text, Field.Store.YES));
indexWriter.addDocument(doc);
indexWriter.close();
IndexReader indexReader = DirectoryReader.open(directory);
IndexSearcher indexSearcher = new IndexSearcher(indexReader);
QueryParser parser = new QueryParser( "Content", analyzer);
Query query = parser.parse("Lucene");
int hitsPerPage = 10;
TopDocs docs = indexSearcher.search(query, hitsPerPage);
ScoreDoc[] hits = docs.scoreDocs;
int end = Math.min(docs.totalHits, hitsPerPage);
System.out.print("Total Hits: " + docs.totalHits);
System.out.print("Results: ");
for (int i = 0; i < end; i++) {
	Document d = indexSearcher.doc(hits[i].doc);
	System.out.println("Content: " + d.get("Content"));}

The preceding code sets up a StandardAnalyzer to analyze text. 
uses a RAMDirectory for index store.
configures IndexWriter to put a piece of content into the index.
uses QueryParser to generate Query object, in order to perform a search. 
It also has a sample code that shows how to retrieve search results from TopDocs by displaying total hits, and shows matching documents by DocId.

1 1
END