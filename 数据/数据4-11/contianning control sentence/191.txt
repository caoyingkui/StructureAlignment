IndexSearcher searcher = new IndexSearcher(directory);
searcher.setDefaultFieldSortScoring(true, false); // #2
TopDocs results = searcher.search(query, null, 10, sort); // #3
System.out.println("\nResults for: " + query.toString() + " sorted by " + sort); // 4
System.out.println(StringUtils.rightPad("Title", 30) + StringUtils.rightPad("pubmonth", 10) + StringUtils.center("id", 4) + StringUtils.center("score", 15));
PrintStream out = new PrintStream(System.out, true, "UTF-8"); // #5
DecimalFormat scoreFormatter = new DecimalFormat("0.######");
for (int i = 0; i < results.scoreDocs.length; i++) {
	int docID = results.scoreDocs[i].doc;
	float score = results.scoreDocs[i].score;
	Document doc = searcher.doc(docID);
	System.out.println( StringUtils.rightPad( StringUtils.abbreviate(doc.get("title"), 29), 30) + StringUtils.rightPad(doc.get("pubmonth"), 10) + StringUtils.center("" + docID, 4) + StringUtils.leftPad( scoreFormatter.format(score), 12)); // #6
	out.println(" " + doc.get("category"));}
searcher.close();

Sort object encapsulates sorting info.
Tell IndexSearcher we want scores for each hit.
Search method that accepts Collector.
toString output.
Ensure unicode output is handled properly.
StringUtils provides columnar output.
Explanation commented out for now.

2 2
3 3
4 4
6 5 
12 6
END